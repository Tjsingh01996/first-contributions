/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateTestttArgs } from "./CreateTestttArgs";
import { UpdateTestttArgs } from "./UpdateTestttArgs";
import { DeleteTestttArgs } from "./DeleteTestttArgs";
import { TestttCountArgs } from "./TestttCountArgs";
import { TestttFindManyArgs } from "./TestttFindManyArgs";
import { TestttFindUniqueArgs } from "./TestttFindUniqueArgs";
import { Testtt } from "./Testtt";
import { TestttService } from "../testtt.service";
@graphql.Resolver(() => Testtt)
export class TestttResolverBase {
  constructor(protected readonly service: TestttService) {}

  async _testttsMeta(
    @graphql.Args() args: TestttCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Testtt])
  async testtts(@graphql.Args() args: TestttFindManyArgs): Promise<Testtt[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Testtt, { nullable: true })
  async testtt(
    @graphql.Args() args: TestttFindUniqueArgs
  ): Promise<Testtt | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Testtt)
  async createTesttt(@graphql.Args() args: CreateTestttArgs): Promise<Testtt> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Testtt)
  async updateTesttt(
    @graphql.Args() args: UpdateTestttArgs
  ): Promise<Testtt | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Testtt)
  async deleteTesttt(
    @graphql.Args() args: DeleteTestttArgs
  ): Promise<Testtt | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
